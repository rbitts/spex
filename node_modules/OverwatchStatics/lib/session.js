#!/usr/bin/env node

"use strict";
var fs = require('fs');
var common = require('./common.js');
var statics = require('./statics.js');
var syncSql = require('sync-sql');

let SessionProvider = function () {

    var self = this;

    /*
     * 사용자 세션 관련 API
     */
    self.SessionUserInfo = (user_id, callback) => {

        return new Promise((resolve, reject) => {

            console.log(user_id);
            user_id = user_id.toRequestID();

            let query = "SELECT `UT`.id, `UT`.role, `UT`.team, `UT`.rank, `UT`.pin,`UT`.avatar,`UT`.`hero`, `UT`.poll, `TT`.teamname, `UT`.`position_offense`, `UT`.`position_defense`, `UT`.`position_support`, `UT`.`auto_login`" +
                " FROM `" + STATICS_TABLE + "` UT LEFT JOIN `" + TEAMINFO_TABLE + "` TT " +
                " ON `UT`.`team` = `TT`.`teamid` " +
                " WHERE `UT`.`id` = '" + user_id + "' ";

            let response = [];

            let user = {
                id: user_id,
                role: 1,
                team: 0,
                rank: 0,
                pin: "",
                avatar: "",
                poll: 0,
                teamname: "",
            }

            connection.query(query, [])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    console.log("사용자 조회 [ db :" + user_id + " ]");
                    if (response.length == 1) {
                        resolve(response[0]);
                    } else {
                        getUserInfo(user_id)
                            .then(function (info) {
                                user.rank = info.users.profile.rank | 0;
                                user.avatar = info.users.profile.avatar;
                                resolve(user);
                            });
                    }

                });


        });

    }

    /**
     *  사용자 세션 회원가입
     */
    self.SessionSignUp = (user_id, pin, callback) => {

        return new Promise((resolve, reject) => {

            self.SessionUserInfo(user_id)

                .then(function (info) {

                    log(info);

                    let query = "REPLACE INTO `" + STATICS_TABLE + "` (id, role, team, rank, pin, avatar, poll )" +
                        " VALUES('" + user_id + "'," + info.role + "," + info.team + "," + info.rank + ",'" + pin + "','" + info.avatar + "'," + info.poll + ")";

                    let success = false;

                    connection.query(query, [])
                        .on('result', function (result, index) {
                            if (result.affectedRows > 0)
                                success = true;
                        })
                        .on('error', reject)
                        .on('end', function () {

                            self.SessionUserInfo(user_id)
                                .then(function (i) {
                                    resolve(i);
                                });
                        });
                });

        });

    }

    /**
     * 사용자 세션 관련 API (전체조회)
     */
    self.SessionAllUserInfo = (callback) => {
        console.log('사용자 전체 조회');
        let query = "SELECT id, role, team, rank, pin,avatar, poll FROM ?? UT ";

        let response = [];

        let result = connection.query(query, [STATICS_TABLE])
            .on('result', function (results, index) {
                response.push(results);
            })
            .on('error', handle)
            .on('end', function () {
                callback(null, response);
            });
    }

    self.getTeamMembers = (team_id) => {
        return new Promise((resolve, reject) => {
            let query = "SELECT * FROM ?? WHERE `team`= ?";

            let response = [];
            connection.query(query, [STATICS_TABLE, team_id])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    if (response.length == 0) {
                        reject({
                            success: false,
                            message: "사용자 정보를 찾을 수 없습니다."
                        });
                    }
                    resolve(response);
                });
        });
    }

    self.updateUserInfo = (user_id, change_user_id, hero, position_defense, position_offense, position_support) => {
        return new Promise((resolve, reject) => {
            let query = 'UPDATE ?? UT SET `UT`.`hero` = ?, `UT`.`position_defense` = ?,`UT`.`position_offense` = ?,`UT`.`position_support` = ? WHERE `UT`.`id` = ?';

            let success = false;

            connection.query(query, [STATICS_TABLE, hero, position_defense, position_offense, position_support, user_id])
                .on('result', function (result, index) {
                    if (result.affectedRows > 0)
                        success = true;
                })
                .on('error', reject)
                .on('end', function () {
                    resolve({
                        success: success,
                        message: '사용자 정보를 수정하였습니다.'
                    });
                });

        });
    }

    self.changePassword = (user_id, old_password, change_password, change_password_confirm, auto_login) => {
        return new Promise((resolve, reject) => {
            if (change_password != change_password_confirm) {
                reject({
                    success: false,
                    message: '핀번호를 확인해 주세요.'
                });
            }

            let query = 'UPDATE ?? UT SET `UT`.`pin` = ?, `UT`.`auto_login` = ?  WHERE `UT`.`id` = ? AND `UT`.`pin` = ?';

            let success = false;

            connection.query(query, [STATICS_TABLE, change_password, auto_login, user_id, old_password])
                .on('result', function (result, index) {
                    if (result.affectedRows > 0)
                        success = true;
                })
                .on('error', reject)
                .on('end', function () {
                    resolve({
                        success: success,
                        message: '요청을 실행하였습니다..'
                    });
                });

        });
    }

};

var handle = (err) => {
    log(err);
    fs.appendFileSync('error.log', err);

}

module.exports = new SessionProvider();