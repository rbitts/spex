#!/usr/bin/env node

"use strict";
var fs = require('fs');
var common = require('./common.js');

let ScreamProvider = function () {

    var self = this;
    connection.connect(function (err) {
        if (err) {
            console.log(err);
        }
    });

    self.getLeagueScore = () => {

        return new Promise((resolve, reject) => {

            var win_query = '';
            for (var i = 1; i < 7; i++) {
                win_query += 'UNION ALL SELECT `RT`.rid, if(`RT`.won_team_id = `GT`.blue_team_id, `RT`.blue_player_' + i + ' , `RT`.red_player_' + i + ') as player_id FROM ?? RT LEFT JOIN game GT ON `GT`.gid = `RT`.gid  WHERE `RT`.won_team_id != 0 AND `RT`.blue_player_' + i + ' != \'\' AND `RT`.red_player_' + i + ' != \'\'  ';
            }

            let query =
                'SELECT COUNT(*) as `point`, player_id FROM( ' +
                'SELECT rid, blue_player_1 as player_id FROM ?? WHERE blue_player_1 != \'\'' +
                'UNION ALL SELECT rid, blue_player_2 as player_id FROM ?? WHERE blue_player_2 != \'\'' +
                'UNION ALL SELECT rid, blue_player_3 as player_id FROM ?? WHERE blue_player_3 != \'\'' +
                'UNION ALL SELECT rid, blue_player_4 as player_id FROM ?? WHERE blue_player_4 != \'\'' +
                'UNION ALL SELECT rid, blue_player_5 as player_id FROM ?? WHERE blue_player_5 != \'\'' +
                'UNION ALL SELECT rid, blue_player_6 as player_id FROM ?? WHERE blue_player_6 != \'\'' +
                'UNION ALL SELECT rid, red_player_1 as player_id FROM ?? WHERE red_player_1 != \'\'' +
                'UNION ALL SELECT rid, red_player_2 as player_id FROM ?? WHERE red_player_2 != \'\'' +
                'UNION ALL SELECT rid, red_player_3 as player_id FROM ?? WHERE red_player_3 != \'\'' +
                'UNION ALL SELECT rid, red_player_4 as player_id FROM ?? WHERE red_player_4 != \'\'' +
                'UNION ALL SELECT rid, red_player_5 as player_id FROM ?? WHERE red_player_5 != \'\'' +
                'UNION ALL SELECT rid, red_player_6 as player_id FROM ?? WHERE red_player_6 != \'\'' +
                'UNION ALL SELECT rid, potg_player_id as player_id FROM ?? WHERE potg_player_id != \'\'' +
                win_query +
                ' ) T GROUP BY player_id ORDER BY point DESC';

            let response = [];

            connection.query(query, [
                    LEAGUE_ROUND_TABLE, LEAGUE_ROUND_TABLE,
                    LEAGUE_ROUND_TABLE, LEAGUE_ROUND_TABLE,
                    LEAGUE_ROUND_TABLE, LEAGUE_ROUND_TABLE,
                    LEAGUE_ROUND_TABLE, LEAGUE_ROUND_TABLE,
                    LEAGUE_ROUND_TABLE, LEAGUE_ROUND_TABLE,
                    LEAGUE_ROUND_TABLE, LEAGUE_ROUND_TABLE,
                    LEAGUE_ROUND_TABLE,
                    LEAGUE_ROUND_TABLE, LEAGUE_ROUND_TABLE,
                    LEAGUE_ROUND_TABLE, LEAGUE_ROUND_TABLE,
                    LEAGUE_ROUND_TABLE, LEAGUE_ROUND_TABLE,
                ])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    resolve(response);
                });
        });
    }

    self.getGameInfo = () => {
        return new Promise((resolve, reject) => {
            let query = 'SELECT `GT`.`gid`, `GT`.`date`,`GT`.`week`, `GT`.`time`, `WTT`.`teamname` as `won_team_name`,`GT`.`blue_team_id`, `BTT`.`teamname` as `blue_team_name`,`BTT`.`teamlogo` as `blue_team_logo`, `GT`.`red_team_id`,`RTT`.`teamname` as `red_team_name`,`RTT`.`teamlogo` as `red_team_logo` FROM ?? GT  LEFT JOIN ?? WTT ON `GT`.`won_team_id` = `WTT`.`teamid` , ?? BTT, ?? RTT WHERE `GT`.`blue_team_id` = `BTT`.`teamid` AND `GT`.`red_team_id` = `RTT`.`teamid` ORDER BY `GT`.`date` ASC';

            let response = [];

            connection.query(query, [LEAGUE_GAME_TABLE, TEAMINFO_TABLE, TEAMINFO_TABLE, TEAMINFO_TABLE])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    resolve(response);
                });
        });
    }

    self.getCurrentDayGames = () => {
        return new Promise((resolve, reject) => {
            let query = 'SELECT `GT`.`gid`, `GT`.`date`,`GT`.`week`, `GT`.`time`, `WTT`.`teamname` as `won_team_name`,`GT`.`blue_team_id`, `BTT`.`teamname` as `blue_team_name`,`BTT`.`teamlogo` as `blue_team_logo`, `GT`.`red_team_id`,`RTT`.`teamname` as `red_team_name`,`RTT`.`teamlogo` as `red_team_logo` FROM ?? GT  LEFT JOIN ?? WTT ON `GT`.`won_team_id` = `WTT`.`teamid` , ?? BTT, ?? RTT WHERE `GT`.`blue_team_id` = `BTT`.`teamid` AND `GT`.`red_team_id` = `RTT`.`teamid` AND `GT`.`date` = CURDATE() ';

            let response = [];
            connection.query(query, [LEAGUE_GAME_TABLE, TEAMINFO_TABLE, TEAMINFO_TABLE, TEAMINFO_TABLE])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    resolve(response);
                });
        });
    }

    self.getGamesInfo = () => {
        return new Promise((resolve, reject) => {
            let query = 'SELECT `GT`.`gid`, `GT`.`date`,`GT`.`week`, `GT`.`time`, `WTT`.`teamname` as `won_team_name`,`GT`.`blue_team_id`, `BTT`.`teamname` as `blue_team_name`,`BTT`.`teamlogo` as `blue_team_logo`, `GT`.`red_team_id`,`RTT`.`teamname` as `red_team_name`,`RTT`.`teamlogo` as `red_team_logo`, `GT`.game_link FROM ?? GT  LEFT JOIN ?? WTT ON `GT`.`won_team_id` = `WTT`.`teamid` , ?? BTT, ?? RTT WHERE `GT`.`blue_team_id` = `BTT`.`teamid` AND `GT`.`red_team_id` = `RTT`.`teamid` ORDER BY `GT`.date ASC';

            let response = [];
            connection.query(query, [LEAGUE_GAME_TABLE, TEAMINFO_TABLE, TEAMINFO_TABLE, TEAMINFO_TABLE])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    resolve(response);
                });
        });
    }

    self.getCurrentWeekGames = () => {
        return new Promise((resolve, reject) => {
            let query = 'SELECT `GT`.`gid`, `GT`.`date`,`GT`.`week`, `GT`.`time`, `WTT`.`teamname` as `won_team_name`,`GT`.`blue_team_id`, `BTT`.`teamname` as `blue_team_name`,`BTT`.`teamlogo` as `blue_team_logo`, `GT`.`red_team_id`,`RTT`.`teamname` as `red_team_name`,`RTT`.`teamlogo` as `red_team_logo`, `GT`.`game_link`,`GT`.`potg_link` FROM ?? GT  LEFT JOIN ?? WTT ON `GT`.`won_team_id` = `WTT`.`teamid` , ?? BTT, ?? RTT WHERE `GT`.`blue_team_id` = `BTT`.`teamid` AND `GT`.`red_team_id` = `RTT`.`teamid` AND `GT`.`week` = ( WEEK(CURDATE(),4) - WEEK(\'2017-06-05\',3) +1 ) ORDER BY `GT`.`date` ASC';
            // CURDATE()
            let response = [];

            connection.query(query, [LEAGUE_GAME_TABLE, TEAMINFO_TABLE, TEAMINFO_TABLE, TEAMINFO_TABLE])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    resolve(response);
                });
        });
    }

    self.getGameScore = () => {
        return new Promise((resolve, reject) => {

            // todo score modify
            let query = 'SELECT * FROM (SELECT `TT`.teamid, `TT`.teamname, `TT`.teamlogo, SUM( if(`BTT`.won_team_id  = `TT`.teamid, 1, 0 ) ) as \'win\', SUM( if(`BTT`.won_team_id  != `TT`.teamid, 1, 0 ) ) as \'lose\' FROM ?? TT  LEFT JOIN ?? BTT ON (`TT`.teamid = `BTT`.blue_team_id OR `TT`.teamid = `BTT`.red_team_id) AND `BTT`.won_team_id != 0 GROUP BY `TT`.teamid ) GST ORDER BY `GST`.win DESC ;';

            let response = [];

            connection.query(query, [TEAMINFO_TABLE, LEAGUE_GAME_TABLE])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    // if (response.length == 0) {
                    //     reject({
                    //         success: false,
                    //         message: "팀정보를 찾을 수 없습니다."
                    //     });
                    // }
                    resolve(response);
                });

        });
    }
    self.getGameInfoById = (gid) => {

        return new Promise((resolve, reject) => {
            let query = 'SELECT `GT`.`gid`,`GT`.`date`,`GT`.`won_team_id`, `GT`.`week`, `GT`.`time`, `GT`.`blue_team_id`, `BTT`.`teamname` as `blue_team_name`, `GT`.`red_team_id`,`RTT`.`teamname` as `red_team_name`,`GT`.`game_link`, `GT`.`potg_link` FROM ?? GT , ?? BTT, ?? RTT WHERE `GT`.`blue_team_id` = `BTT`.`teamid` AND `GT`.`red_team_id` = `RTT`.`teamid` AND `GT`.`gid` = ?;';

            let response = [];

            connection.query(query, [LEAGUE_GAME_TABLE, TEAMINFO_TABLE, TEAMINFO_TABLE, gid])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    // if (response.length == 0) {
                    //     reject({
                    //         success: false,
                    //         message: "팀정보를 찾을 수 없습니다."
                    //     });
                    // }
                    resolve(response[0]);
                });

        });
    }

    self.LeagueModifyRound = (gid, rid, battle_ground, won_team_id, potg_player_id, potg_link, blue_player_1, blue_player_2, blue_player_3, blue_player_4, blue_player_5, blue_player_6, red_player_1, red_player_2, red_player_3, red_player_4, red_player_5, red_player_6) => {
        return new Promise((resolve, reject) => {
            let query = 'INSERT INTO ?? (`gid`, `rid`, `battle_ground`, `won_team_id`, `potg_player_id`, `potg_link`, `blue_player_1`, `blue_player_2`, `blue_player_3`, `blue_player_4`, `blue_player_5`, `blue_player_6`, `red_player_1`, `red_player_2`, `red_player_3`, `red_player_4`, `red_player_5`, `red_player_6`)' +
                'VALUES(?, ? ,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE `battle_ground`= ?, `won_team_id` = ?, `potg_player_id` = ?, `potg_link` = ?, `blue_player_1` = ?, `blue_player_2` = ?, `blue_player_3` = ?, `blue_player_4` = ?, `blue_player_5` = ?, `blue_player_6` = ?, `red_player_1` = ?, `red_player_2` = ?, `red_player_3` = ?, `red_player_4` = ?, `red_player_5` = ?, `red_player_6` = ? ;';

            var success = false;

            connection.query(query, [LEAGUE_ROUND_TABLE, gid, rid, battle_ground, won_team_id, potg_player_id, potg_link, blue_player_1, blue_player_2, blue_player_3, blue_player_4, blue_player_5, blue_player_6, red_player_1, red_player_2, red_player_3, red_player_4, red_player_5, red_player_6, battle_ground, won_team_id, potg_player_id, potg_link, blue_player_1, blue_player_2, blue_player_3, blue_player_4, blue_player_5, blue_player_6, red_player_1, red_player_2, red_player_3, red_player_4, red_player_5, red_player_6])
                .on('result', function (result, index) {
                    if (result.affectedRows > 0)
                        success = true;
                })
                .on('error', reject)
                .on('end', function () {
                    (success) ? resolve({
                        success: success
                    }): reject({
                        success: success
                    });
                });
        })
    };

    self.getRoundInfo = (gid) => {
        return new Promise((resolve, reject) => {
            let query = 'SELECT `GT`.*, `TT`.`teamname` as `won_team_name` FROM ?? GT LEFT JOIN ?? TT ON `GT`.`won_team_id` = `TT`.`teamid` WHERE `GT`.`gid` = ?';

            let response = [];

            connection.query(query, [LEAGUE_ROUND_TABLE, TEAMINFO_TABLE, gid])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    resolve(response);
                });
        });
    };

    self.modifyGame = (gid, date, time, blue_team_id, red_team_id, won_team_id, game_link, potg_link) => {

        return new Promise((resolve, reject) => {
            let query = 'UPDATE ?? SET `date` = ?, `week` = ( SELECT WEEK(?, 4) - WEEK(\'2017-06-05\',3) +1 ), `time` = ?, `blue_team_id` = ?, `red_team_id` = ?, `won_team_id` = ?, `game_link` = ?, `potg_link` = ? WHERE `gid` = ? ;';
            connection.query(query, [LEAGUE_GAME_TABLE, date, date, time,
                    blue_team_id, red_team_id, won_team_id, game_link, potg_link, gid
                ])
                .on('result', function (results, index) {
                    if (results.affectedRows == 0) {
                        reject({
                            success: false,
                            message: "게임을 생성하지 못하였습니다."
                        });
                    }
                })
                .on('error', reject)
                .on('end', function () {
                    resolve({
                        success: true,
                        message: "게임을 생성하였습니다."
                    });
                });
        });
    }

    self.insertGame = (date, time, blue_team_id, red_team_id) => {

        return new Promise((resolve, reject) => {
            let query = 'INSERT INTO ?? (`date`,`week`,`time`, `blue_team_id`, `red_team_id`) VALUES (' +
                "?, ( SELECT WEEK(?, 4) - WEEK('2017-06-05',3) +1 ), " +
                ' ?, ?, ? );';

            connection.query(query, [LEAGUE_GAME_TABLE, date, date, time, blue_team_id, red_team_id])
                .on('result', function (results, index) {
                    if (results.affectedRows == 0) {
                        reject({
                            success: false,
                            message: "게임을 생성하지 못하였습니다."
                        });
                    }
                })
                .on('error', reject)
                .on('end', function () {
                    resolve({
                        success: true,
                        message: "게임을 생성하였습니다."
                    });
                });
        });
    }

    // self.getGameInfoByID = (gid) => {

    //     return new Promise((resolve, reject) => {

    //         let query = 'SELECT `GT`.*, `BTT`.teamname FROM ?? GT LEFT JOIN ?? BTT ON `GT`.`blue_team_id` = `BTT`.`teamid` WHERE `GT`.`gid` = ? ;';

    //         let response = [];

    //         connection.query(query, [LEAGUE_GAME_TABLE, gid, TEAMINFO_TABLE])
    //             .on('result', function (results, index) {
    //                 response.push(results);
    //             })
    //             .on('error', reject)
    //             .on('end', function () {
    //                 resolve(response);
    //             });
    //     });
    // }

    self.getLeagueTeamInfo = () => {
        return new Promise((resolve, reject) => {
            let query = 'SELECT * FROM ?? WHERE ?;';

            let response = [];

            connection.query(query, [TEAMINFO_TABLE, 1])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    if (response.length == 0) {
                        reject({
                            success: false,
                            message: "팀정보를 찾을 수 없습니다."
                        });
                    }
                    resolve(response);
                });
        });
    }
    // http://andyfelong.com/2016/01/mongodb-3-0-9-binaries-for-raspberry-pi-2-jessie/
    self.getLeagueTeamMemberView = (teamid) => {
        return new Promise((resolve, reject) => {
            let query = 'SELECT * FROM ?? WHERE team = ? ORDER BY role DESC;';

            let response = [];

            connection.query(query, [STATICS_TABLE, teamid])
                .on('result', function (results, index) {
                    response.push(results);
                })
                .on('error', reject)
                .on('end', function () {
                    if (response.length == 0) {
                        reject({
                            success: false,
                            message: "팀정보를 찾을 수 없습니다."
                        });
                    }
                    resolve(response);
                });
        });
    }
}

var handle = (err) => {
    log(err);
    fs.appendFileSync('error.log', err);
}

module.exports = new ScreamProvider();