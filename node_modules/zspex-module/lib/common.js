var owjs = require('overwatch-js');
var fs = require('fs');

global.SPEX_TABLE_MEMBER = 'members';


global.time_played_sorting = (a, b) => {
    return parseFloat(b.time_played) - parseFloat(a.time_played);
}

global.getTimeStampString = (timestamp) => {
    if (timestamp > 3600)
        return (timestamp / 3600).toFixed(0) + '시간 전';
    else if (timestamp > 60)
        return (timestamp / 60).toFixed(0) + '분 전';
    else
        return timestamp + '초 전';
}


global.getUserInfo = (nick, callback) => {
    console.log('온라인 조회 [ ' + nick + ' ]');

    return new Promise((resolve, reject) => {
        owjs
            .getAll('pc', 'kr', encodeURI(nick))
            .then((data) => {
                //console.dir(data);
                let competitive_detail = JSON.parse(JSON.stringify(HeroPlaceHolder));
                let quickplay_detail = JSON.parse(JSON.stringify(HeroPlaceHolder));

                let competitive_order = [];
                for (var hero in data.competitive.heroes) {
                    let h = {
                        name: hero,
                        time_played: data.competitive.heroes[hero].time_played,
                    }
                    competitive_order.push(h);

                    if (competitive_detail[hero] !== undefined) {
                        competitive_detail[hero].detail = data.competitive.heroes[hero];
                    }
                }

                competitive_order.sort(time_played_sorting);

                let quickplay_order = [];

                for (var hero in data.quickplay.heroes) {
                    let h = {
                        name: hero,
                        time_played: data.quickplay.heroes[hero].time_played,
                    }
                    quickplay_order.push(h);

                    if (quickplay_detail[hero] !== undefined) {
                        quickplay_detail[hero].detail = data.quickplay.heroes[hero];
                    }
                }

                quickplay_order.sort(time_played_sorting);

                let user = {
                    users: {
                        profile: data.profile,
                        competitive_global: data.competitive.global,
                        quickplay_global: data.quickplay.global,
                        competitive: {
                            data: competitive_detail,
                            order: competitive_order,
                        },

                        quickplay: {
                            data: quickplay_detail,
                            order: quickplay_order
                        }
                    }
                }
                resolve(user);

            }, function (err) {
                reject(err);
            }).catch(handle);
    });
}

var handle = (err) => {
    log(err);
    fs.appendFileSync('error.log', err);
}
module.exports