"use strict";

var fs = require('fs');
var T = require('../Schema/teamSchema.js');
var jsonQuery = require('json-query');

let TeamProvider = function () {

    var self = this;

    var defaultSeason = 2;

    self.__team;

    self.init = function () {
        return new Promise((resolve, reject) => {
            self.getAll()
                .then(T => {
                    self.__team = T;
                    resolve(T);
                }).catch(reject);;
        });
    }

    self.create = function (season, id, name) {
        return new T({
            teamid: id,
            season: season,
            info: {
                name: name
            }
        });
    }


    self.save = function (instance) {
        return new Promise((resolve, reject) => {
            if (instance === null) {
                reject({});
            }
            instance.save(function (err, s) {
                if (err) reject(err);
                resolve(s);
            });
        });
    }


    self.get = function (id, season) {
        return new Promise((resolve, reject) => {
            var s = (season === undefined || season === null) ? defaultSeason : season;
            T.findOne({
                    teamid: id
                }).then(D => {
                    if (D === null)
                        reject({
                            team: id,
                            err: {
                                code: 4,
                                message: "TEAM NOT FOUNDED",
                            }
                        })
                    resolve(D);
                })
                .catch(reject);
        });
    }

    self.getAll = function (season) {
        return new Promise((resolve, reject) => {
            var s = (season === undefined || season === null) ? defaultSeason : season;
            T.find({
                    season: s
                }, null, {
                    sort: {
                        teamid: 1
                    }
                }).then(D => {
                    if (D === null)
                        reject({
                            err: {
                                code: 4,
                                message: "TEAM NOT FOUNDED",
                            }
                        })
                    resolve(D);
                })
                .catch(reject);
        });
    }

    //for ejs 
    self.get_sync = function (id) {
        return jsonQuery('[*][teamid={0}]'.format(id), {
            data: self.__team,
        }).value;
    }
}

module.exports = new TeamProvider();