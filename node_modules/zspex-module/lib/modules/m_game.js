"use strict";

var fs = require('fs');
var G = require('../Schema/gameSchema.js');

const defaultSeason = 2;
let GameProvider = function () {

    var self = this;



    self.create = function (date, season) {
        return new Promise((resolve, reject) => {
            season = season === undefined ? defaultSeason : season;

            G.count({})
                .then(count => {
                    console.log(count);
                    resolve(new G({
                        season: season,
                        game_id: count,
                        date: date
                    }));
                })
                .catch(console.error);
        });
    }


    self.get = function (id, season) {
        return new Promise((resolve, reject) => {
            var s = (season === undefined || season === null) ? defaultSeason : season;
            G.findOne({
                    game_id: id
                }).then(D => {
                    resolve(D);
                })
                .catch(reject);
        });
    }

    self.getGameScores = function (id) {
        return new Promise((resolve, reject) => {
            self.getAll()
                .then(G => {

                    var response = [];

                    id = !Array.isArray(id) ? [id] : id;

                    id.forEach(target_team_id => {

                        let games = G.filter(el => {
                            return ((el.game_info.red_team.id == target_team_id || el.game_info.blue_team.id == target_team_id) && el.expired)
                        })

                        let score = {
                            id: target_team_id,
                            won: 0,
                            lost: 0
                        }

                        games.forEach(game => {
                            // console.log(game.game_info.round_info);
                            let won_score = game.game_info.round_info.filter(el => {
                                return (el.teams[0].id == target_team_id && el.teams[0].won) || (el.teams[1].id == target_team_id && el.teams[1].won);
                            }).length;

                            let lost_score = game.game_info.round_info.filter(el => {
                                return (el.teams[0].id == target_team_id && !el.teams[0].won) || (el.teams[1].id == target_team_id && !el.teams[1].won);
                            }).length;

                            (won_score > lost_score) ? score.won = score.won + 1: score.lost = score.lost + 1;

                        });
                        response.push(score);
                    });

                    response.sort(function (a, b) {
                        return b.won - a.won;
                    });

                    let rank = 0,
                        preRankValue = 100;

                    response.forEach(el => {
                        if (preRankValue > el.won) {
                            preRankValue = el.won;
                            rank++;
                        }
                        el.rank = rank;
                    })

                    resolve(response);

                }).catch(reject);
        });
    }

    self.getRecentGame = function (season, team_id) {

        var match = {};
        var s = (season === undefined || season === null) ? defaultSeason : season;
        match = {
            season: s,
            // expired: false,
            done: false,
        }

        if (team_id !== undefined) {
            match = {
                season: s,
                // expired: false,
                done: false,
                $or: [{
                        'game_info.red_team.id': team_id
                    },
                    {
                        'game_info.blue_team.id': team_id
                    }
                ]
            }
        }

        return new Promise((resolve, reject) => {

            G.findOne(match, null, {
                    sort: {
                        date: 1
                    }
                })
                .then(D => {
                    resolve(D);
                })
                .catch(reject);
        });
    }


    self.getStreamAll = function (season = defaultSeason) {
        return new Promise((resolve, reject) => {
            G.find({
                    season: season,
                    expired: true,
                    done: false,
                }, null, {
                    sort: {
                        date: 1
                    }
                })
                .then(D => {
                    resolve(JSON.parse(JSON.stringify(D)));
                })
                .catch(reject);
        });
    }


    self.getDoneAll = function (season = defaultSeason) {
        return new Promise((resolve, reject) => {
            let matches = {
                season: season,
                done: true
            }
            G.find(matches, null, {
                    sort: {
                        date: 1
                    }
                })
                .then(D => {
                    resolve(JSON.parse(JSON.stringify(D)));
                })
                .catch(reject);
        });
    }

    self.getNotExpiredAll = function (start, end, filter_team, season = defaultSeason) {
        return new Promise((resolve, reject) => {
            let matches = {
                season: season,
                expired: false
            }

            var moment = require('moment');

            if (start !== undefined && start !== null && end !== undefined && end !== null) {
                matches.date = {
                    $gte: moment(start).toISOString(),
                    $lt: moment(end).toISOString(),
                }
            }

            if (filter_team !== undefined && filter_team !== null) {
                matches.$or = [{
                    'game_info.blue_team.id': filter_team
                }, {
                    'game_info.red_team.id': filter_team,
                }]
            }

            G.find(matches, null, {
                    sort: {
                        date: 1
                    }
                })
                .then(D => {
                    resolve(JSON.parse(JSON.stringify(D)));
                })
                .catch(reject);
        });
    }

    self.getAll = function (season) {
        return new Promise((resolve, reject) => {
            var s = (season === undefined || season === null) ? defaultSeason : season;
            G.find({
                    season: s
                }, null, {
                    sort: {
                        date: 1
                    }
                })
                .then(D => {
                    resolve(JSON.parse(JSON.stringify(D)));
                })
                .catch(reject);
        });
    }

    self.save = function (instance) {
        return new Promise((resolve, reject) => {
            if (instance === null) {
                reject({});
            }
            instance.save(function (err, s) {
                if (err) reject(err);
                resolve(s);
            });
        });
    }

}
module.exports = new GameProvider();