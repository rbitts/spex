"use strict";

var fs = require('fs');
var M = require('../Schema/memberSchema.js');
var jsonQuery = require('json-query');
var _ = require('underscore');

let MemberProvider = function () {

    var self = this;

    var defaultSeason = 2;

    self.__members;

    self.init = function () {
        return new Promise((resolve, reject) => {
            M.find({})
                .then(M => {
                    self.__members = M;
                    resolve(self.__members);
                }).catch(reject);
        });
    }

    self.get = function (id) {
        return jsonQuery('[*][id={0}]'.format(id), {
            data: self.__members,
        }).value;
    }

    self.test = function () {
        return M.get('ANA-12840');
        // return new Promise((resolve, reject) => {
        //     M.get('ANA-12840').then(m => {
        //         // console.log(m);
        //         resolve(m.verify('1111'));
        //     }).catch(reject);
        // })
    }

    self.getMember = function (id) {
        return new Promise((resolve, reject) => {
            M.findOne({
                    id: id
                }).then(D => {
                    if (D === null)
                        reject({
                            id: id,
                            err: {
                                code: 4,
                                message: "USER NOT FOUNDED",
                            }
                        })
                    resolve(D);
                })
                .catch(console.error);
        });
    }

    self.getByLevel = function (level) {
        return new Promise((resolve, reject) => {
            M.find({
                    'account.security.account_type': level
                }).then(D => {
                    resolve(D);
                })
                .catch(reject);
        });
    }

    self.search = function (id) {
        return new Promise((resolve, reject) => {
            var matcher = {
                id: {
                    $regex: new RegExp('.*{0}.*'.format(id), 'i')
                }
            }
            M.find(matcher).then(D => {
                    if (D === null)
                        reject({
                            id: id,
                            err: {
                                code: 4,
                                message: "USER NOT FOUNDED",
                            }
                        })
                    resolve(D);
                })
                .catch(console.error);
        });

    }

    self.getMembers = function (id) {
        return new Promise((resolve, reject) => {
            var matcher = (!Array.isArray(id)) ? {
                id: id
            } : {
                id: {
                    $in: id
                }
            }

            M.find(matcher).then(D => {
                    if (D === null)
                        reject({
                            id: id,
                            err: {
                                code: 4,
                                message: "USER NOT FOUNDED",
                            }
                        })
                    resolve(D);
                })
                .catch(console.error);
        });
    }


    self.saveMember = function (instance) {
        return new Promise((resolve, reject) => {
            if (instance === null) {
                reject({});
            }
            instance.save(function (err, member) {
                if (err) reject(err);
                resolve(member);
            });
        });
    }

    self.createMember = function (id) {
        return new M({
            id: id,
        });
    }

    self.parseOnline = function (id) {
        return new Promise((resolve, reject) => {
            var ow = require('overwatch-js');
            ow.getOverall('pc', 'kr', id, 'en-us')
                .then((data) => {
                    // console.dir(data, {
                    //     depth: 2,
                    //     colors: true
                    // });
                    resolve(data);

                })
                .catch(reject);
        });
    }

    self.getTeamMembers = function (teamid, season) {
        return new Promise((resolve, reject) => {

            var s = (season === undefined || season === null) ? defaultSeason : season;

            let field = s === 1 ? {
                'league.s01.team': teamid,
            } : {
                'league.s02.team': teamid,
            };
            M.find(field).then(D => {
                    resolve(D);
                })
                .catch(console.error);

        });
    }

    self.getMembersScoreAverage = function (season) {
        return new Promise((resolve, reject) => {
            var s = (_.isUndefined(season) || _.isNull(season)) ? defaultSeason : season;

            let field = s === 1 ? {
                $and: [{
                        'league.s01.team': {
                            $ne: 0
                        }
                    },
                    {
                        'account.security.account_type': {
                            $ne: 99
                        }
                    }
                ]
            } : {
                $and: [{
                        'league.s02.team': {
                            $ne: 0
                        }
                    },
                    {
                        'account.security.account_type': {
                            $ne: 99
                        }
                    }
                ]
            }

            M.find(field).then(D => {
                    let scoreSum = _(_(D).map(t => {
                        return _.isNumber(t.competitive.max_score) ? t.competitive.max_score : 0;
                    })).reduce(function (p, n) {
                        return p + n;
                    })
                    resolve({
                        score: scoreSum,
                        count: D.length
                    });
                })
                .catch(reject);

        });
    }

    self.getTeamMembersCount = function (season) {
        return new Promise((resolve, reject) => {

            var s = (season === undefined || season === null) ? defaultSeason : season;

            M.aggregate([{
                    $match: {
                        'league.s02.team': {
                            $ne: 0
                        }
                    }
                }, {
                    '$group': {
                        '_id': '$league.s02.team',
                        total: {
                            $sum: 1
                        }
                    }
                }])
                .then(D => {
                    resolve(D);
                }).catch(reject);

        });
    }

    String.prototype.pad = function (width) {
        return this.length >= width ? this : new Array(width - this.length + 1).join('0') + this;
    }
}

module.exports = new MemberProvider();