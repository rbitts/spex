"use strict";

var fs = require('fs');
var Team = require('./m_team.js');
var Game = require('./m_game.js');
var Member = require('./m_member.js');
var Maps = require('./m_map.js');
var _ = require('underscore');

let SummaryProvider = function () {

    var self = this;

    var _rank;
    var recentGame;

    self.init = function () {
        console.log('SPEX module initialize starting....');

        let promises = [
            Member.init(),
            Team.init(),
            Maps.init()
        ];

        Promise.all(promises)
            .then((values) => {
                self.update().then(() => {
                    console.log('SPEX module initialize completed');
                }).catch(console.error);

            }).catch(console.error);
    }

    self.update = function () {
        return new Promise((resolve, reject) => {

            let promises = [
                Game.getRecentGame(),
                Game.getAll(),
                Team.getAll()
            ];
            Promise.all(promises)
                .then((values) => {
                    let G = values[0].toJSON(),
                        games = values[1],
                        T = values[2];


                    //ranking
                    let rankArray = [];

                    let teamid = T.map(team => {
                        return team.teamid;
                    });

                    teamid.forEach(target_team_id => {
                        if (target_team_id > 0) {

                            let gameArray = games.filter(el => {
                                return ((el.game_info.red_team.id == target_team_id || el.game_info.blue_team.id == target_team_id) && el.done)
                            })

                            let score = {
                                id: target_team_id,
                                won: 0,
                                lost: 0
                            }

                            gameArray.forEach(game => {
                                // console.log(game.game_info.round_info);
                                let won_score = game.game_info.round_info.filter(el => {
                                    return (el.teams[0].id == target_team_id && el.teams[0].won) || (el.teams[1].id == target_team_id && el.teams[1].won);
                                }).length;

                                let lost_score = game.game_info.round_info.filter(el => {
                                    return (el.teams[0].id == target_team_id && !el.teams[0].won) || (el.teams[1].id == target_team_id && !el.teams[1].won);
                                }).length;

                                (won_score > lost_score) ? score.won = score.won + 1: score.lost = score.lost + 1;

                            });
                            rankArray.push(score);
                        }
                    });

                    rankArray.sort(function (a, b) {
                        var delta = b.won - a.won;
                        if (delta) return delta;
                        return a.lost - b.lost;
                    });


                    let rank = 0,
                        preWonValue = 100,
                        prevLostValue = 0;

                    rankArray.forEach(el => {
                        if (preWonValue > el.won) {
                            preWonValue = el.won;
                            prevLostValue = el.lost;
                            rank++;
                        } else if (preWonValue == el.won && prevLostValue < el.lost) {
                            prevLostValue = el.lost;
                            rank++;
                        }

                        el.rank = rank;
                    })

                    self._rank = rankArray;

                    //recent game history
                    G.game_info.red_team.history = [];
                    G.game_info.blue_team.history = [];

                    let searchTeams = [G.game_info.red_team, G.game_info.blue_team];

                    searchTeams.forEach(team => {

                        let game_history = games.filter(el => {
                            return ((el.game_info.red_team.id == team.id || el.game_info.blue_team.id == team.id) && el.done)
                        })

                        game_history.forEach(game => {
                            // console.log(game.game_info.round_info);
                            let won_score = game.game_info.round_info.filter(el => {
                                return (el.teams[0].id == team.id && el.teams[0].won) || (el.teams[1].id == team.id && el.teams[1].won);
                            }).length;

                            let lost_score = game.game_info.round_info.filter(el => {
                                return (el.teams[0].id == team.id && !el.teams[0].won) || (el.teams[1].id == team.id && !el.teams[1].won);
                            }).length;

                            team.history.push({
                                won: won_score > lost_score,
                                score: {
                                    won: won_score,
                                    lost: lost_score
                                }
                            })
                        });

                        team.rank = rankArray.filter(el => {
                            return el.id == team.id;
                        })[0];

                    });

                    self.recentGame = G;

                    resolve(G);

                }).catch(reject);
        });
    }

    self.getRank = function (id) {
        return self._rank;
    }

    self.getRecentGame = function () {
        // console.log(self.recentGame);
        return self.recentGame;
    }

    self.getRankByID = function (id) {

        let searchTeamID = id;
        return new Promise((resolve, reject) => {

            let promises = [
                Game.getDoneAll(),
                Team.getAll()
            ];

            Promise.all(promises)
                .then((values) => {
                    let Games = values[0],
                        Teams = values[1];

                    //ranking
                    let rankArray = [];

                    _(Teams).each(t => {
                        let score = {
                            id: t.teamid,
                            won: 0,
                            lost: 0
                        }
                        _(_(Games).filter(game => {
                            return game.game_info.blue_team.id == score.id || game.game_info.red_team.id == score.id;
                        })).each(game => {

                            let won_score = game.game_info.round_info.filter(el => {
                                return (el.teams[0].id == score.id && el.teams[0].won) || (el.teams[1].id == score.id && el.teams[1].won);
                            }).length;

                            let lost_score = game.game_info.round_info.filter(el => {
                                return (el.teams[0].id == score.id && !el.teams[0].won) || (el.teams[1].id == score.id && !el.teams[1].won);
                            }).length;

                            (won_score > lost_score) ? score.won = score.won + 1: score.lost = score.lost + 1;
                        });
                        rankArray.push(score);
                    });

                    rankArray.sort(function (a, b) {
                        var delta = b.won - a.won;
                        if (delta) return delta;
                        return a.lost - b.lost;
                    });

                    let rank = 0,
                        preWonValue = 100,
                        prevLostValue = 0;

                    rankArray.forEach(el => {
                        if (preWonValue > el.won) {
                            preWonValue = el.won;
                            prevLostValue = el.lost;
                            rank++;
                        } else if (preWonValue == el.won && prevLostValue < el.lost) {
                            prevLostValue = el.lost;
                            rank++;
                        }

                        el.rank = rank;
                    })

                    resolve(_(rankArray).find(el => {
                        return el.id == searchTeamID
                    }));

                }).catch(reject);
        });
    }

    self.getHistory = function (id) {

        let searchTeamID = id;

        return new Promise((resolve, reject) => {

            let retHistory = [];

            let promises = [
                Game.getAll(),
                Team.getAll()
            ];

            Promise.all(promises)
                .then((values) => {
                    let Games = values[0],
                        Teams = values[1];

                    let game_history = Games.filter(el => {
                        return ((el.game_info.red_team.id == searchTeamID || el.game_info.blue_team.id == searchTeamID) && el.done)
                    })

                    _(game_history).each(game => {
                        // console.log(game.game_info.round_info);
                        let won_score = game.game_info.round_info.filter(el => {
                            return (el.teams[0].id == searchTeamID && el.teams[0].won) || (el.teams[1].id == searchTeamID && el.teams[1].won);
                        }).length;

                        let lost_score = game.game_info.round_info.filter(el => {
                            return (el.teams[0].id == searchTeamID && !el.teams[0].won) || (el.teams[1].id == searchTeamID && !el.teams[1].won);
                        }).length;

                        let versusTeam = _.isEqual(game.game_info.red_team.id, searchTeamID) ? game.game_info.blue_team.id : game.game_info.red_team.id;

                        let versusTeamInfo = Team.get_sync(versusTeam);
                        retHistory.push({
                            won: won_score > lost_score,
                            score: {
                                won: won_score,
                                lost: lost_score
                            },
                            versus: {
                                id: versusTeam,
                                name: versusTeamInfo.info.name,
                                logo: versusTeamInfo.info.logo
                            },
                        })
                    });

                    resolve(retHistory);

                }).catch(reject);


        });
    }
}
module.exports = new SummaryProvider();